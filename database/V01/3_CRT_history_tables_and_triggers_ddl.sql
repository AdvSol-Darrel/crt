-- =============================================
-- Author:		Ben Driver
-- Create date: 2019-11-27
-- Updates: 
--	2020-01-02: v0.13.2 revisions in support of sprint 4.
--	2019-12-12: v0.13 Updates in support of sprint 3 & 4. 
--	2019-11-27: v0.12 Updates in support of sprint 2 & 3.
-- 
-- Description:	T-SQL generated Triggers and History Tables.  Includes sequences for History tables.  All dates set to UTC time, to be consistent throughout the database.
-- =============================================

USE CRT_DEV; -- uncomment appropriate instance
--USE CRT_TST;
--USE CRT_UAT;
--USE CRT_PRD;
GO


IF OBJECT_ID ('CRT_CODE_LKUP_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger CRT_CODE_LKUP_A_S_IUD_TR
go

IF OBJECT_ID ('CRT_CODE_LOOKUP_HIST', 'U') IS NOT NULL   
  drop table CRT_CODE_LOOKUP_HIST
go

IF OBJECT_ID ('CRT_CODE_LOOKUP_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence CRT_CODE_LOOKUP_H_ID_SEQ
go

IF OBJECT_ID ('CRT_PERM_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger CRT_PERM_A_S_IUD_TR
go

IF OBJECT_ID ('CRT_PERMISSION_HIST', 'U') IS NOT NULL   
  drop table CRT_PERMISSION_HIST
go

IF OBJECT_ID ('CRT_PERMISSION_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence CRT_PERMISSION_H_ID_SEQ
go

IF OBJECT_ID ('CRT_RL_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger CRT_RL_A_S_IUD_TR
go

IF OBJECT_ID ('CRT_ROLE_HIST', 'U') IS NOT NULL   
  drop table CRT_ROLE_HIST
go

IF OBJECT_ID ('CRT_ROLE_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence CRT_ROLE_H_ID_SEQ
go

IF OBJECT_ID ('CRT_RL_PERM_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger CRT_RL_PERM_A_S_IUD_TR
go

IF OBJECT_ID ('CRT_ROLE_PERMISSION_HIST', 'U') IS NOT NULL   
  drop table CRT_ROLE_PERMISSION_HIST
go

IF OBJECT_ID ('CRT_ROLE_PERMISSION_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence CRT_ROLE_PERMISSION_H_ID_SEQ
go

IF OBJECT_ID ('CRT_SYS_USR_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger CRT_SYS_USR_A_S_IUD_TR
go

IF OBJECT_ID ('CRT_SYSTEM_USER_HIST', 'U') IS NOT NULL   
  drop table CRT_SYSTEM_USER_HIST
go

IF OBJECT_ID ('CRT_SYSTEM_USER_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence CRT_SYSTEM_USER_H_ID_SEQ
go

IF OBJECT_ID ('CRT_USR_RL_A_S_IUD_TR', 'TR') IS NOT NULL   
  drop trigger CRT_USR_RL_A_S_IUD_TR
go

IF OBJECT_ID ('CRT_USER_ROLE_HIST', 'U') IS NOT NULL   
  drop table CRT_USER_ROLE_HIST
go

IF OBJECT_ID ('CRT_USER_ROLE_H_ID_SEQ', 'SO') IS NOT NULL   
  drop sequence CRT_USER_ROLE_H_ID_SEQ
go

CREATE SEQUENCE [dbo].[CRT_CODE_LOOKUP_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[CRT_CODE_LOOKUP_HIST](
  CODE_LOOKUP_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [CRT_CODE_LOOKUP_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [CODE_LOOKUP_ID] numeric NOT NULL, [CODE_SET] varchar(20) NULL, [CODE_NAME] varchar(20) NULL, [CODE_VALUE_TEXT] varchar(20) NULL, [CODE_VALUE_NUM] numeric NULL, [CODE_VALUE_FORMAT] varchar(12) NULL, [DISPLAY_ORDER] numeric NULL, [END_DATE] datetime NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE CRT_CODE_LOOKUP_HIST ADD CONSTRAINT CRT_CODE__H_PK PRIMARY KEY CLUSTERED (CODE_LOOKUP_HIST_ID);  
ALTER TABLE CRT_CODE_LOOKUP_HIST ADD CONSTRAINT CRT_CODE__H_UK UNIQUE (CODE_LOOKUP_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[CRT_PERMISSION_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[CRT_PERMISSION_HIST](
  PERMISSION_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [CRT_PERMISSION_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [PERMISSION_ID] numeric NOT NULL, [NAME] varchar(30) NOT NULL, [DESCRIPTION] varchar(150) NULL, [END_DATE] date NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE CRT_PERMISSION_HIST ADD CONSTRAINT CRT_PERM_H_PK PRIMARY KEY CLUSTERED (PERMISSION_HIST_ID);  
ALTER TABLE CRT_PERMISSION_HIST ADD CONSTRAINT CRT_PERM_H_UK UNIQUE (PERMISSION_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[CRT_ROLE_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[CRT_ROLE_HIST](
  ROLE_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [CRT_ROLE_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [ROLE_ID] numeric NOT NULL, [NAME] varchar(30) NOT NULL, [DESCRIPTION] varchar(150) NULL, [END_DATE] date NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE CRT_ROLE_HIST ADD CONSTRAINT CRT_RL_H_PK PRIMARY KEY CLUSTERED (ROLE_HIST_ID);  
ALTER TABLE CRT_ROLE_HIST ADD CONSTRAINT CRT_RL_H_UK UNIQUE (ROLE_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[CRT_ROLE_PERMISSION_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[CRT_ROLE_PERMISSION_HIST](
  ROLE_PERMISSION_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [CRT_ROLE_PERMISSION_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [ROLE_PERMISSION_ID] numeric NOT NULL, [ROLE_ID] numeric NOT NULL, [PERMISSION_ID] numeric NOT NULL, [END_DATE] date NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE CRT_ROLE_PERMISSION_HIST ADD CONSTRAINT CRT_RL_PE_H_PK PRIMARY KEY CLUSTERED (ROLE_PERMISSION_HIST_ID);  
ALTER TABLE CRT_ROLE_PERMISSION_HIST ADD CONSTRAINT CRT_RL_PE_H_UK UNIQUE (ROLE_PERMISSION_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[CRT_SYSTEM_USER_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[CRT_SYSTEM_USER_HIST](
  SYSTEM_USER_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [CRT_SYSTEM_USER_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [SYSTEM_USER_ID] numeric NOT NULL, [API_CLIENT_ID] varchar(40) NULL, [USER_GUID] uniqueidentifier NULL, [USERNAME] varchar(32) NOT NULL,[FIRST_NAME] varchar(150) NULL, [LAST_NAME] varchar(150) NULL, [EMAIL] varchar(100) NULL, [END_DATE] datetime NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE CRT_SYSTEM_USER_HIST ADD CONSTRAINT CRT_SYS_U_H_PK PRIMARY KEY CLUSTERED (SYSTEM_USER_HIST_ID);  
ALTER TABLE CRT_SYSTEM_USER_HIST ADD CONSTRAINT CRT_SYS_U_H_UK UNIQUE (SYSTEM_USER_HIST_ID,END_DATE_HIST)
go

CREATE SEQUENCE [dbo].[CRT_USER_ROLE_H_ID_SEQ] AS [bigint] START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 50;

CREATE TABLE [dbo].[CRT_USER_ROLE_HIST](
  USER_ROLE_HIST_ID [bigint] DEFAULT (NEXT VALUE FOR [CRT_USER_ROLE_H_ID_SEQ]) NOT NULL
  ,EFFECTIVE_DATE_HIST [datetime] NOT NULL default getutcdate()
  ,END_DATE_HIST [datetime]
  , [USER_ROLE_ID] numeric NOT NULL, [ROLE_ID] numeric NOT NULL, [SYSTEM_USER_ID] numeric NOT NULL, [END_DATE] datetime NULL, [CONCURRENCY_CONTROL_NUMBER] bigint NOT NULL, [APP_CREATE_USERID] varchar(30) NOT NULL, [APP_CREATE_TIMESTAMP] datetime NOT NULL, [APP_CREATE_USER_GUID] uniqueidentifier NOT NULL, [APP_CREATE_USER_DIRECTORY] varchar(12) NOT NULL, [APP_LAST_UPDATE_USERID] varchar(30) NOT NULL, [APP_LAST_UPDATE_TIMESTAMP] datetime NOT NULL, [APP_LAST_UPDATE_USER_GUID] uniqueidentifier NOT NULL, [APP_LAST_UPDATE_USER_DIRECTORY] varchar(12) NOT NULL, [DB_AUDIT_CREATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_CREATE_TIMESTAMP] datetime NOT NULL, [DB_AUDIT_LAST_UPDATE_USERID] varchar(30) NOT NULL, [DB_AUDIT_LAST_UPDATE_TIMESTAMP] datetime NOT NULL
  )
ALTER TABLE CRT_USER_ROLE_HIST ADD CONSTRAINT CRT_USR_R_H_PK PRIMARY KEY CLUSTERED (USER_ROLE_HIST_ID);  
ALTER TABLE CRT_USER_ROLE_HIST ADD CONSTRAINT CRT_USR_R_H_UK UNIQUE (USER_ROLE_HIST_ID,END_DATE_HIST)
go

CREATE TRIGGER CRT_CODE_LKUP_A_S_IUD_TR ON CRT_CODE_LOOKUP FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update CRT_CODE_LOOKUP_HIST set END_DATE_HIST = @curr_date where CODE_LOOKUP_ID in (select CODE_LOOKUP_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into CRT_CODE_LOOKUP_HIST ([CODE_LOOKUP_ID], [CODE_SET], [CODE_NAME], [CODE_VALUE_TEXT], [CODE_VALUE_NUM], [CODE_VALUE_FORMAT], [DISPLAY_ORDER], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], CODE_LOOKUP_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [CODE_LOOKUP_ID], [CODE_SET], [CODE_NAME], [CODE_VALUE_TEXT], [CODE_VALUE_NUM], [CODE_VALUE_FORMAT], [DISPLAY_ORDER], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[CRT_CODE_LOOKUP_H_ID_SEQ]) as [CODE_LOOKUP_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC CRT_error_handling
END CATCH;
go

CREATE TRIGGER CRT_PERM_A_S_IUD_TR ON CRT_PERMISSION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update CRT_PERMISSION_HIST set END_DATE_HIST = @curr_date where PERMISSION_ID in (select PERMISSION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into CRT_PERMISSION_HIST ([PERMISSION_ID], [NAME], [DESCRIPTION], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], PERMISSION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [PERMISSION_ID], [NAME], [DESCRIPTION], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[CRT_PERMISSION_H_ID_SEQ]) as [PERMISSION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC CRT_error_handling
END CATCH;
go


CREATE TRIGGER CRT_RL_A_S_IUD_TR ON CRT_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update CRT_ROLE_HIST set END_DATE_HIST = @curr_date where ROLE_ID in (select ROLE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into CRT_ROLE_HIST ([ROLE_ID], [NAME], [DESCRIPTION], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_ID], [NAME], [DESCRIPTION], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[CRT_ROLE_H_ID_SEQ]) as [ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC CRT_error_handling
END CATCH;
go

CREATE TRIGGER CRT_RL_PERM_A_S_IUD_TR ON CRT_ROLE_PERMISSION FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update CRT_ROLE_PERMISSION_HIST set END_DATE_HIST = @curr_date where ROLE_PERMISSION_ID in (select ROLE_PERMISSION_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into CRT_ROLE_PERMISSION_HIST ([ROLE_PERMISSION_ID], [ROLE_ID], [PERMISSION_ID], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], ROLE_PERMISSION_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [ROLE_PERMISSION_ID], [ROLE_ID], [PERMISSION_ID], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[CRT_ROLE_PERMISSION_H_ID_SEQ]) as [ROLE_PERMISSION_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC CRT_error_handling
END CATCH;
go

CREATE TRIGGER CRT_SYS_USR_A_S_IUD_TR ON CRT_SYSTEM_USER FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update CRT_SYSTEM_USER_HIST set END_DATE_HIST = @curr_date where SYSTEM_USER_ID in (select SYSTEM_USER_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into CRT_SYSTEM_USER_HIST ([SYSTEM_USER_ID], [USER_GUID], [USERNAME],[FIRST_NAME], [LAST_NAME], [EMAIL], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], SYSTEM_USER_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [SYSTEM_USER_ID], [USER_GUID], [USERNAME], [FIRST_NAME], [LAST_NAME], [EMAIL], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[CRT_SYSTEM_USER_H_ID_SEQ]) as [SYSTEM_USER_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC CRT_error_handling
END CATCH;
go

CREATE TRIGGER CRT_USR_RL_A_S_IUD_TR ON CRT_USER_ROLE FOR INSERT, UPDATE, DELETE AS
SET NOCOUNT ON
BEGIN TRY
DECLARE @curr_date datetime;
SET @curr_date = getutcdate();
  IF NOT EXISTS(SELECT * FROM inserted) AND NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- historical
  IF EXISTS(SELECT * FROM deleted)
    update CRT_USER_ROLE_HIST set END_DATE_HIST = @curr_date where USER_ROLE_ID in (select USER_ROLE_ID from deleted) and END_DATE_HIST is null;
  
  IF EXISTS(SELECT * FROM inserted)
    insert into CRT_USER_ROLE_HIST ([USER_ROLE_ID], [ROLE_ID], [SYSTEM_USER_ID], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], USER_ROLE_HIST_ID, END_DATE_HIST, EFFECTIVE_DATE_HIST)
      select [USER_ROLE_ID], [ROLE_ID], [SYSTEM_USER_ID], [END_DATE], [CONCURRENCY_CONTROL_NUMBER], [APP_CREATE_USERID], [APP_CREATE_TIMESTAMP], [APP_CREATE_USER_GUID], [APP_CREATE_USER_DIRECTORY], [APP_LAST_UPDATE_USERID], [APP_LAST_UPDATE_TIMESTAMP], [APP_LAST_UPDATE_USER_GUID], [APP_LAST_UPDATE_USER_DIRECTORY], [DB_AUDIT_CREATE_USERID], [DB_AUDIT_CREATE_TIMESTAMP], [DB_AUDIT_LAST_UPDATE_USERID], [DB_AUDIT_LAST_UPDATE_TIMESTAMP], (next value for [dbo].[CRT_USER_ROLE_H_ID_SEQ]) as [USER_ROLE_HIST_ID], null as [END_DATE_HIST], @curr_date as [EFFECTIVE_DATE_HIST] from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC CRT_error_handling
END CATCH;
go














